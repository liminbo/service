// Code generated by protoc-gen-go. DO NOT EDIT.
// source: attachment_gateway.proto

package go_micro_gateway_attachment_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	v1 "micro-service/app/service/attachment/api/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("attachment_gateway.proto", fileDescriptor_e84217155fd9e69c) }

var fileDescriptor_e84217155fd9e69c = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x2c, 0x29, 0x49,
	0x4c, 0xce, 0xc8, 0x4d, 0xcd, 0x2b, 0x89, 0x4f, 0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x4b, 0xcf, 0xd7, 0xcb, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0x83,
	0x89, 0x23, 0x94, 0xea, 0x95, 0x19, 0x4a, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27,
	0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x74,
	0x4b, 0x09, 0x20, 0x29, 0x06, 0x8b, 0x18, 0x9d, 0x63, 0xe2, 0x12, 0x74, 0x84, 0x0b, 0x06, 0xa7,
	0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xad, 0x64, 0xe4, 0x12, 0x45, 0x88, 0xba, 0xa4, 0x96, 0x24,
	0x66, 0xe6, 0x38, 0x55, 0x7a, 0xa6, 0x14, 0x0b, 0x99, 0xe8, 0xc1, 0x1d, 0x50, 0x5c, 0x54, 0x86,
	0x6a, 0xb9, 0x1e, 0x56, 0x2d, 0x41, 0xa9, 0x85, 0x52, 0xe4, 0xe8, 0x2a, 0x50, 0x52, 0x69, 0xba,
	0xfc, 0x64, 0x32, 0x93, 0x9c, 0x92, 0xa4, 0x7e, 0x99, 0xa1, 0x7e, 0x22, 0x36, 0x55, 0x56, 0x8c,
	0x5a, 0x42, 0x3d, 0x8c, 0x5c, 0xbc, 0x8e, 0x29, 0x29, 0x08, 0x53, 0x84, 0x74, 0xf0, 0xda, 0x86,
	0xac, 0x14, 0xe4, 0x36, 0x7d, 0x52, 0x54, 0x83, 0x9c, 0x25, 0x03, 0x76, 0x96, 0x98, 0x92, 0x20,
	0xd8, 0x59, 0xc8, 0x0a, 0xac, 0x18, 0xb5, 0x92, 0xd8, 0xc0, 0xe1, 0x6a, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x3e, 0xfc, 0xf2, 0x2f, 0xc3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AttachmentServiceClient is the client API for AttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AttachmentServiceClient interface {
	// 根据attachment_id获取attachment详情
	AttachmentDetailByIds(ctx context.Context, in *v1.AttachmentDetailByIdsReq, opts ...grpc.CallOption) (*v1.AttachmentDetailByIdsRep, error)
	// 增加附件
	AddAttachment(ctx context.Context, in *v1.AddAttachmentReq, opts ...grpc.CallOption) (*v1.AddAttachmentReqRep, error)
}

type attachmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAttachmentServiceClient(cc *grpc.ClientConn) AttachmentServiceClient {
	return &attachmentServiceClient{cc}
}

func (c *attachmentServiceClient) AttachmentDetailByIds(ctx context.Context, in *v1.AttachmentDetailByIdsReq, opts ...grpc.CallOption) (*v1.AttachmentDetailByIdsRep, error) {
	out := new(v1.AttachmentDetailByIdsRep)
	err := c.cc.Invoke(ctx, "/go.micro.gateway.attachment.v1.AttachmentService/AttachmentDetailByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) AddAttachment(ctx context.Context, in *v1.AddAttachmentReq, opts ...grpc.CallOption) (*v1.AddAttachmentReqRep, error) {
	out := new(v1.AddAttachmentReqRep)
	err := c.cc.Invoke(ctx, "/go.micro.gateway.attachment.v1.AttachmentService/AddAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentServiceServer is the server API for AttachmentService service.
type AttachmentServiceServer interface {
	// 根据attachment_id获取attachment详情
	AttachmentDetailByIds(context.Context, *v1.AttachmentDetailByIdsReq) (*v1.AttachmentDetailByIdsRep, error)
	// 增加附件
	AddAttachment(context.Context, *v1.AddAttachmentReq) (*v1.AddAttachmentReqRep, error)
}

// UnimplementedAttachmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAttachmentServiceServer struct {
}

func (*UnimplementedAttachmentServiceServer) AttachmentDetailByIds(ctx context.Context, req *v1.AttachmentDetailByIdsReq) (*v1.AttachmentDetailByIdsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachmentDetailByIds not implemented")
}
func (*UnimplementedAttachmentServiceServer) AddAttachment(ctx context.Context, req *v1.AddAttachmentReq) (*v1.AddAttachmentReqRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttachment not implemented")
}

func RegisterAttachmentServiceServer(s *grpc.Server, srv AttachmentServiceServer) {
	s.RegisterService(&_AttachmentService_serviceDesc, srv)
}

func _AttachmentService_AttachmentDetailByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AttachmentDetailByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).AttachmentDetailByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.gateway.attachment.v1.AttachmentService/AttachmentDetailByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).AttachmentDetailByIds(ctx, req.(*v1.AttachmentDetailByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_AddAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AddAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).AddAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.gateway.attachment.v1.AttachmentService/AddAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).AddAttachment(ctx, req.(*v1.AddAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AttachmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.gateway.attachment.v1.AttachmentService",
	HandlerType: (*AttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachmentDetailByIds",
			Handler:    _AttachmentService_AttachmentDetailByIds_Handler,
		},
		{
			MethodName: "AddAttachment",
			Handler:    _AttachmentService_AddAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attachment_gateway.proto",
}
